// Registrador de operandos para a ALU

module Register_File (clk, reset, Rs1, Rs2, Rd, Write_data, RegWrite, Read_data1, Read_data2);

input clk, reset, RegWrite; // single bit inputs
input [19:15] Rs1; 
input [24:20] Rs2; 
input [11:7] Rd;
input [31:0] Write_data;
output [31:0] Read_data1, Read_data2;

reg [31:0] Registers [31:0] // 32 registers of 32 bits

assign Read_data1 = Registers[Rs1]; // a saida do operando1 sera do endereço Rs1 vindo da instruçao
assign Read_data2 = Registers[Rs2];
integer k;

always @(posedge clk)
begin 
	if(reset==1'b1)
	begin
		for(k = 0; k<32; k=k+1)
			Registers[k] = 32'h0;
		end
	end
	else if (RegWrite == 1'h1) Registers[Rd] = Write_data; // Se receber o sinal de controle de RegWrite, aloca no endereço Rd o valor lido da memoria Write_data
end
	
endmodule	